x-baseService: &baseService
  restart: always
  healthcheck:
    interval: 5s
    timeout: 5s
    retries: 5

services:
  gateway:
    <<: *baseService
    image: nginx
    container_name: gateway
    ports:
      - ${GATEWAY_PORT}:80
    volumes:
      - ./gateway/:/etc/nginx/templates
    depends_on:
      - graphql-api
      - web-app
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/
      GRAPHAPI_PORT: ${GRAPHAPI_PORT}
      WEBAPP_PORT: ${WEBAPP_PORT}

  sql-db:
    <<: *baseService
    image: postgres
    container_name: sql-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
    volumes:
      - ./persist/sql-db:/var/lib/postgresql/data
    environment:
      PGPORT: ${PGPORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  adminer:
    <<: *baseService
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - ${ADMINER_PORT}:8080
    depends_on:
      sql-db:
        condition: service_healthy

  web-app:
    <<: *baseService
    build: ./web-app
    container_name: web-app
    command: npm run dev
    volumes:
      - ./web-app/src:/app/src/
    restart: always

  graphql-api:
    <<: *baseService
    build: ./graphql-api
    container_name: graphql-api
    command: npm run dev
    volumes:
      - ./graphql-api/src:/app/src/
    environment:
      PGPORT: ${PGPORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      GRAPHAPI_PORT: ${GRAPHAPI_PORT}
      COOKIE_TTL: ${COOKIE_TTL}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      sql-db:
        condition: service_healthy

  # files:
  #   <<: *baseService
  #   build: ./files
  #   container_name: files
  #   volumes:
  #     - ./files/src:/app/src
  #     - ./data/uploads:/app/uploads
  #   env_file:
  #     - .env
